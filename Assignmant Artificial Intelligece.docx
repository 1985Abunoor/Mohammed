{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SQzWkW75lAdJ"
   },
   "source": [
    "# <center> Flower Recognition Through CNN Keras"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UHuFUjodlAde"
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 20535,
     "status": "ok",
     "timestamp": 1685700969007,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "223tXI7BlVOJ",
    "outputId": "1c4d2512-f5bc-46f2-8987-9f44728f991d"
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'google'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 4\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Once mounted, you can access your Google Drive files and folders\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;66;03m# under the '/content/drive' directory.\u001b[39;00m\n\u001b[1;32m----> 4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mgoogle\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcolab\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m drive\n\u001b[0;32m      5\u001b[0m drive\u001b[38;5;241m.\u001b[39mmount(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/content/drive\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'google'"
     ]
    }
   ],
   "source": [
    "# Once mounted, you can access your Google Drive files and folders\n",
    "# under the '/content/drive' directory.\n",
    "\n",
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RuC4iV38lAdf"
   },
   "source": [
    "## Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "executionInfo": {
     "elapsed": 5504,
     "status": "ok",
     "timestamp": 1685700974500,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "s1hRC3HFlAdg"
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'keras'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 17\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpreprocessing\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m LabelEncoder\n\u001b[0;32m     16\u001b[0m \u001b[38;5;66;03m#preprocess.\u001b[39;00m\n\u001b[1;32m---> 17\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpreprocessing\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mimage\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ImageDataGenerator\n\u001b[0;32m     18\u001b[0m \u001b[38;5;66;03m#Transfer Learning specific modules\u001b[39;00m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mapplications\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mvgg16\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m VGG16\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'keras'"
     ]
    }
   ],
   "source": [
    "# imports various libraries that will be used for data visualization,\n",
    "# manipulation, model selection, and deep learning.\n",
    "\n",
    "\n",
    "# data visualisation and manipulation\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# sets matplotlib to inline and displays graphs below the corressponding cell.\n",
    "%matplotlib inline\n",
    "\n",
    "#model selection\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "#preprocess.\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "#Transfer Learning specific modules\n",
    "from keras.applications.vgg16 import VGG16\n",
    "\n",
    "#DeepLearning libraraies\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.optimizers import Adam\n",
    "from keras.utils import to_categorical\n",
    "\n",
    "import tensorflow as tf\n",
    "import random as rn\n",
    "import cv2                  \n",
    "from tqdm import tqdm\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ocI89KiVlAdk"
   },
   "source": [
    "## Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wZac8Xq2lAdl"
   },
   "source": [
    "### A. Making the functions to get the training and validation set from the Images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "executionInfo": {
     "elapsed": 14,
     "status": "ok",
     "timestamp": 1685700974502,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "abZS8dPk9ze1"
   },
   "outputs": [],
   "source": [
    "# Initializing empty lists for storing data.\n",
    "X=[]\n",
    "Z=[]\n",
    "\n",
    "# Defining the size of the images (both width and height) to be resized to.\n",
    "IMG_SIZE=150\n",
    "\n",
    "# Defining the directories of different flower categories in the dataset.\n",
    "# Change these directories to match the actual directory paths in your Google Drive.\n",
    "FLOWER_DAISY_DIR='/content/drive/MyDrive/0_Assignment/Dataset/train/daisy'\n",
    "FLOWER_SUNFLOWER_DIR='/content/drive/MyDrive/0_Assignment/Dataset/train/sunflower'\n",
    "FLOWER_TULIP_DIR='/content/drive/MyDrive/0_Assignment/Dataset/train/tulip'\n",
    "FLOWER_ROSE_DIR='/content/drive/MyDrive/0_Assignment/Dataset/train/rose'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1685700974503,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "2qPgwo1d9ze4"
   },
   "outputs": [],
   "source": [
    "# A function to assign a label to an image based on its flower type.\n",
    "def assign_label(img,flower_type):\n",
    "    return flower_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "executionInfo": {
     "elapsed": 14,
     "status": "ok",
     "timestamp": 1685700974504,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "vlY8PywM9ze7"
   },
   "outputs": [],
   "source": [
    "# A function to create the training data by processing images from a specific directory.\n",
    "def make_train_data(flower_type,DIR):\n",
    "    for img in tqdm(os.listdir(DIR)):\n",
    "        label=assign_label(img,flower_type)\n",
    "        path = os.path.join(DIR,img)\n",
    "        img = cv2.imread(path,cv2.IMREAD_COLOR)\n",
    "        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n",
    "        \n",
    "        X.append(np.array(img))\n",
    "        Z.append(str(label))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 35573,
     "status": "ok",
     "timestamp": 1685701010064,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "9hn_RjL29ze_",
    "outputId": "a1023e7b-a36a-49cd-a1f7-d29a6e0864d2"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 501/501 [00:06<00:00, 77.37it/s] \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "501\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 471/471 [00:05<00:00, 90.60it/s] \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "972\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 601/601 [00:08<00:00, 72.15it/s] \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1573\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 497/497 [00:05<00:00, 90.06it/s] "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2070\n",
      "Total length of X (training data): 2070\n",
      "Total length of Z (labels): 2070\n",
      "Unique labels (flower types): {'Rose', 'Sunflower', 'Tulip', 'Daisy'}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# Creating the training data for each flower category and printing the length of the data.\n",
    "make_train_data('Daisy',FLOWER_DAISY_DIR)\n",
    "print(len(X))\n",
    "\n",
    "make_train_data('Sunflower',FLOWER_SUNFLOWER_DIR)\n",
    "print(len(X))\n",
    "\n",
    "make_train_data('Tulip',FLOWER_TULIP_DIR)\n",
    "print(len(X))\n",
    "\n",
    "make_train_data('Rose',FLOWER_ROSE_DIR)\n",
    "print(len(X))\n",
    "\n",
    "print(\"Total length of X (training data):\", len(X))\n",
    "print(\"Total length of Z (labels):\", len(Z))\n",
    "print(\"Unique labels (flower types):\", set(Z))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ajuE0R2elAdq"
   },
   "source": [
    "### B. Visualize some Random Images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000,
     "output_embedded_package_id": "1Wn9OmYrEoZfGBkYinQOk3heWeDRU4o3A"
    },
    "executionInfo": {
     "elapsed": 6899,
     "status": "ok",
     "timestamp": 1685701016947,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "gPolpADLYv9p",
    "outputId": "22b033a1-8c22-4c95-a9d4-af494a960379"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'rn' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 6\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m5\u001b[39m):\n\u001b[0;32m      5\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m j \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m (\u001b[38;5;241m3\u001b[39m):\n\u001b[1;32m----> 6\u001b[0m         l\u001b[38;5;241m=\u001b[39m\u001b[43mrn\u001b[49m\u001b[38;5;241m.\u001b[39mrandint(\u001b[38;5;241m0\u001b[39m,\u001b[38;5;28mlen\u001b[39m(Z))\n\u001b[0;32m      8\u001b[0m         \u001b[38;5;66;03m# Displaying the image at the selected index on the current subplot.\u001b[39;00m\n\u001b[0;32m      9\u001b[0m         ax[i, j]\u001b[38;5;241m.\u001b[39mimshow(cv2\u001b[38;5;241m.\u001b[39mcvtColor(X[l], cv2\u001b[38;5;241m.\u001b[39mCOLOR_RGB2BGR))\n",
      "\u001b[1;31mNameError\u001b[0m: name 'rn' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x1500 with 15 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating subplots to display a grid of flower images with their corresponding labels.\n",
    "fig,ax=plt.subplots(5,3)\n",
    "fig.set_size_inches(15,15)\n",
    "for i in range(5):\n",
    "    for j in range (3):\n",
    "        l=rn.randint(0,len(Z))\n",
    "\n",
    "        # Displaying the image at the selected index on the current subplot.\n",
    "        ax[i, j].imshow(cv2.cvtColor(X[l], cv2.COLOR_RGB2BGR))\n",
    "\n",
    "        # Setting the title of the subplot to the corresponding flower label.\n",
    "        ax[i, j].set_title('Flower: ' + Z[l])\n",
    "        \n",
    "plt.tight_layout();       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 40,
     "status": "ok",
     "timestamp": 1685701016948,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "R-QAavGFlAdr",
    "outputId": "54176a40-6c5b-421c-e92a-2293033040cf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Pixles in each image : 67500\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of Pixles in each image :\",150*150*3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gyNaSk39lAds"
   },
   "source": [
    "### C. Label Encoding the Y array (i.e. Daisy->0, Rose->1 etc...) & then One Hot Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 42,
     "status": "ok",
     "timestamp": 1685701016954,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "_Gug0CHU9zfe",
    "outputId": "90c4f09a-7d96-4a33-b92a-20c93c99a5c6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2070, 4)\n",
      "<class 'list'>\n",
      "2070\n",
      "(150, 150, 3)\n"
     ]
    }
   ],
   "source": [
    "# Label encoding and one-hot encoding the labels.\n",
    "le=LabelEncoder()\n",
    "Y=le.fit_transform(Z)\n",
    "Y=to_categorical(Y,4)\n",
    "print(Y.shape)\n",
    "\n",
    "# Printing information about the X data.\n",
    "print(type(X))\n",
    "print(len(X))\n",
    "print(X[1].shape)\n",
    "\n",
    "\n",
    "X_NEW=np.array(X) # Converting X to a NumPy array for further processing.\n",
    "\n",
    "# Image Standardization: Scaling the pixel values between 0 and 1.\n",
    "X_NEW=X_NEW/255"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "75z9hpxulAdu"
   },
   "source": [
    "### D. Splitting into Training and Test Sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 38,
     "status": "ok",
     "timestamp": 1685701016958,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "4xogXfvm9zfg",
    "outputId": "2c1380be-fd3c-42aa-da17-ef9bf8408ee9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X_train: (1552, 150, 150, 3)\n",
      "Shape of y_train: (1552, 4)\n",
      "Shape of X_test: (518, 150, 150, 3)\n",
      "Shape of y_test: (518, 4)\n"
     ]
    }
   ],
   "source": [
    "# Splitting the data into training and testing sets using train_test_split.\n",
    "X_train,X_test,y_train,y_test=train_test_split(X_NEW,Y,test_size=0.25,random_state=42)\n",
    "\n",
    "# Printing the shapes of the training and testing sets.\n",
    "print(\"Shape of X_train:\", np.shape(X_train))\n",
    "print(\"Shape of y_train:\", np.shape(y_train))\n",
    "print(\"Shape of X_test:\", np.shape(X_test))\n",
    "print(\"Shape of y_test:\", np.shape(y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bIFUKfO4lAdw"
   },
   "source": [
    "### E. Setting random seeds for reproducibility."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "executionInfo": {
     "elapsed": 38,
     "status": "ok",
     "timestamp": 1685701016962,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "S_nM3vLf9zfj"
   },
   "outputs": [],
   "source": [
    "np.random.seed(42) # Setting the random seed for NumPy.\n",
    "rn.seed(42) # Setting the random seed for Python's random module.\n",
    "tf.random.set_seed(42) # Setting the random seed for TensorFlow."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "n12n0ur-lAdx"
   },
   "source": [
    "## 3. Modelling (Creating an ImageDataGenerator for data augmentation.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "executionInfo": {
     "elapsed": 39,
     "status": "ok",
     "timestamp": 1685701016964,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "fJsQ9bN_lAd8"
   },
   "outputs": [],
   "source": [
    "datagen = ImageDataGenerator(\n",
    "        featurewise_center=False,  # set input mean to 0 over the dataset\n",
    "        samplewise_center=False,  # set each sample mean to 0\n",
    "        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
    "        samplewise_std_normalization=False,  # divide each input by its std\n",
    "        zca_whitening=False,  # apply ZCA whitening\n",
    "        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n",
    "        zoom_range = 0.1, # Randomly zoom image \n",
    "        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n",
    "        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n",
    "        horizontal_flip=True,  # randomly flip images\n",
    "        vertical_flip=False)  # randomly flip images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 4241,
     "status": "ok",
     "timestamp": 1685701021166,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "qM5fSpKLlAeA",
    "outputId": "fde8e7e2-2343-4704-e3af-5a25cb040fea"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"vgg16\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_1 (InputLayer)        [(None, 150, 150, 3)]     0         \n",
      "                                                                 \n",
      " block1_conv1 (Conv2D)       (None, 150, 150, 64)      1792      \n",
      "                                                                 \n",
      " block1_conv2 (Conv2D)       (None, 150, 150, 64)      36928     \n",
      "                                                                 \n",
      " block1_pool (MaxPooling2D)  (None, 75, 75, 64)        0         \n",
      "                                                                 \n",
      " block2_conv1 (Conv2D)       (None, 75, 75, 128)       73856     \n",
      "                                                                 \n",
      " block2_conv2 (Conv2D)       (None, 75, 75, 128)       147584    \n",
      "                                                                 \n",
      " block2_pool (MaxPooling2D)  (None, 37, 37, 128)       0         \n",
      "                                                                 \n",
      " block3_conv1 (Conv2D)       (None, 37, 37, 256)       295168    \n",
      "                                                                 \n",
      " block3_conv2 (Conv2D)       (None, 37, 37, 256)       590080    \n",
      "                                                                 \n",
      " block3_conv3 (Conv2D)       (None, 37, 37, 256)       590080    \n",
      "                                                                 \n",
      " block3_pool (MaxPooling2D)  (None, 18, 18, 256)       0         \n",
      "                                                                 \n",
      " block4_conv1 (Conv2D)       (None, 18, 18, 512)       1180160   \n",
      "                                                                 \n",
      " block4_conv2 (Conv2D)       (None, 18, 18, 512)       2359808   \n",
      "                                                                 \n",
      " block4_conv3 (Conv2D)       (None, 18, 18, 512)       2359808   \n",
      "                                                                 \n",
      " block4_pool (MaxPooling2D)  (None, 9, 9, 512)         0         \n",
      "                                                                 \n",
      " block5_conv1 (Conv2D)       (None, 9, 9, 512)         2359808   \n",
      "                                                                 \n",
      " block5_conv2 (Conv2D)       (None, 9, 9, 512)         2359808   \n",
      "                                                                 \n",
      " block5_conv3 (Conv2D)       (None, 9, 9, 512)         2359808   \n",
      "                                                                 \n",
      " block5_pool (MaxPooling2D)  (None, 4, 4, 512)         0         \n",
      "                                                                 \n",
      " global_average_pooling2d (G  (None, 512)              0         \n",
      " lobalAveragePooling2D)                                          \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 14,714,688\n",
      "Trainable params: 14,714,688\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Loading the VGG16 pre-trained model and its weights.\n",
    "base_model = VGG16(include_top=False, weights=None, input_shape=(150, 150, 3), pooling='avg')\n",
    "\n",
    "weights_path = '/content/drive/MyDrive/0_Assignment/Dataset/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'\n",
    "\n",
    "base_model.load_weights(weights_path)\n",
    "\n",
    "# Printing the summary of the VGG16 base model.\n",
    "base_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 18,
     "status": "ok",
     "timestamp": 1685701021167,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "VaqxdI0FlAeD",
    "outputId": "5299572e-bb5e-4130-a209-b8d6c360b90b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " vgg16 (Functional)          (None, 512)               14714688  \n",
      "                                                                 \n",
      " dense (Dense)               (None, 512)               262656    \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 64)                32832     \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 4)                 260       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 15,010,436\n",
      "Trainable params: 15,010,436\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Defining the complete model architecture.\n",
    "model = Sequential() # Creating a Sequential model.\n",
    "\n",
    "# Adding the base model (VGG16) as the first layer.\n",
    "model.add(base_model)\n",
    "\n",
    "# Adding additional layers to the model.\n",
    "model.add(Dense(512, activation='relu')) # Dense layer with 512 units and ReLU activation.\n",
    "model.add(Dense(64, activation='relu')) # Dense layer with 64 units and ReLU activation.\n",
    "model.add(Dense(4, activation='softmax')) # Dense layer with 4 units and softmax activation.\n",
    "\n",
    "# Printing the summary of the complete model.\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 747216,
     "status": "ok",
     "timestamp": 1685701783151,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "FdroNxb2lAeD",
    "outputId": "abaff153-921d-4895-8518-b48eebcfcf97"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/keras/optimizers/legacy/adam.py:117: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
      "  super().__init__(name, **kwargs)\n",
      "<ipython-input-15-8326ef6f0125>:12: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
      "  history = model.fit_generator(datagen.flow(X_train, y_train, batch_size=batchSize),\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/23\n",
      "6/6 [==============================] - 65s 2s/step - loss: 1.2891 - accuracy: 0.3742\n",
      "Epoch 2/23\n",
      "6/6 [==============================] - 16s 3s/step - loss: 1.0432 - accuracy: 0.5756\n",
      "Epoch 3/23\n",
      "6/6 [==============================] - 22s 3s/step - loss: 0.6556 - accuracy: 0.7608\n",
      "Epoch 4/23\n",
      "6/6 [==============================] - 26s 4s/step - loss: 0.4784 - accuracy: 0.8092\n",
      "Epoch 5/23\n",
      "6/6 [==============================] - 20s 4s/step - loss: 0.4044 - accuracy: 0.8480\n",
      "Epoch 6/23\n",
      "6/6 [==============================] - 27s 4s/step - loss: 0.3413 - accuracy: 0.8665\n",
      "Epoch 7/23\n",
      "6/6 [==============================] - 29s 4s/step - loss: 0.3183 - accuracy: 0.8717\n",
      "Epoch 8/23\n",
      "6/6 [==============================] - 23s 3s/step - loss: 0.2974 - accuracy: 0.8812\n",
      "Epoch 9/23\n",
      "6/6 [==============================] - 25s 5s/step - loss: 0.3337 - accuracy: 0.8665\n",
      "Epoch 10/23\n",
      "6/6 [==============================] - 19s 4s/step - loss: 0.2623 - accuracy: 0.8958\n",
      "Epoch 11/23\n",
      "6/6 [==============================] - 23s 3s/step - loss: 0.2377 - accuracy: 0.9120\n",
      "Epoch 12/23\n",
      "6/6 [==============================] - 21s 3s/step - loss: 0.2418 - accuracy: 0.9074\n",
      "Epoch 13/23\n",
      "6/6 [==============================] - 22s 3s/step - loss: 0.2103 - accuracy: 0.9151\n",
      "Epoch 14/23\n",
      "6/6 [==============================] - 24s 3s/step - loss: 0.2281 - accuracy: 0.9105\n",
      "Epoch 15/23\n",
      "6/6 [==============================] - 24s 5s/step - loss: 0.4644 - accuracy: 0.8194\n",
      "Epoch 16/23\n",
      "6/6 [==============================] - 23s 3s/step - loss: 0.3032 - accuracy: 0.8904\n",
      "Epoch 17/23\n",
      "6/6 [==============================] - 24s 4s/step - loss: 0.2505 - accuracy: 0.9020\n",
      "Epoch 18/23\n",
      "6/6 [==============================] - 22s 4s/step - loss: 0.2307 - accuracy: 0.9228\n",
      "Epoch 19/23\n",
      "6/6 [==============================] - 20s 3s/step - loss: 0.1800 - accuracy: 0.9367\n",
      "Epoch 20/23\n",
      "6/6 [==============================] - 22s 3s/step - loss: 0.1520 - accuracy: 0.9414\n",
      "Epoch 21/23\n",
      "6/6 [==============================] - 28s 4s/step - loss: 0.1173 - accuracy: 0.9590\n",
      "Epoch 22/23\n",
      "6/6 [==============================] - 19s 4s/step - loss: 0.1098 - accuracy: 0.9545\n",
      "Epoch 23/23\n",
      "6/6 [==============================] - 23s 3s/step - loss: 0.1209 - accuracy: 0.9545\n"
     ]
    }
   ],
   "source": [
    "# Setting the VGG model to be untrainable.\n",
    "# base_model.trainable = False\n",
    "\n",
    "# Compiling the model.\n",
    "model.compile(optimizer=Adam(learning_rate=1e-4), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "\n",
    "batchSize = 256\n",
    "ep = 23\n",
    "\n",
    "# Training the model.\n",
    "history = model.fit_generator(datagen.flow(X_train, y_train, batch_size=batchSize),\n",
    "epochs=ep, use_multiprocessing=True,\n",
    "verbose=1, steps_per_epoch=X_train.shape[0] // batchSize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 6169,
     "status": "ok",
     "timestamp": 1685701802499,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "1WiSsH_9lAeF",
    "outputId": "7e2c63ff-545e-4dba-e471-14e95719bd0c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17/17 [==============================] - 4s 110ms/step - loss: 0.3056 - accuracy: 0.9151\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.3056107461452484, 0.915057897567749]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 472
    },
    "executionInfo": {
     "elapsed": 463,
     "status": "ok",
     "timestamp": 1685701805584,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "TySJPt8qlAeF",
    "outputId": "9ad1e632-6772-48cd-9144-b77939e3508c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.title('Model Accuracy VS Model Loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.legend(['Loss', 'Accuracy'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "executionInfo": {
     "elapsed": 1373,
     "status": "ok",
     "timestamp": 1685703501513,
     "user": {
      "displayName": "Ahsan Ijaz",
      "userId": "07286620483218252020"
     },
     "user_tz": -300
    },
    "id": "cpZCBgPnqMNy"
   },
   "outputs": [],
   "source": [
    "model.save_weights('/content/drive/MyDrive/0_Assignment/Dataset/our_trained_model_weights/my_model_weights.h5')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "nPhQ123ewLCx"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "T4",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}



{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
